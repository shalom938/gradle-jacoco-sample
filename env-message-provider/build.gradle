//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'sample.java-library-conventions'
}

dependencies {
    implementation project(':logging')
    api project(':message-provider')
}

/*
Testing:
see: see: https://docs.gradle.org/current/userguide/java_testing.html#sec:java_testing_modular

This module shows how to patch the module system to do whitebox testing with module boundaries.
The test org.sk.sample.env.EnvMessageProviderTest.testAsService loads a service provider and needs
to run inside the module system.
The compileTestJava and test tasks are patched to run with module-path instead of classpath.
This technic is just for demonstration, i prefer the solution in project messenger with two test
tasks, one for whitebox and one for blackbox testing.

In any case ,To do the same in a clean way use the gradle module plugin that does the same thing and more:
https://github.com/java9-modularity/gradle-modules-plugin/tree/v1.8.10,
 */

def moduleName = "sample.envMessageProvider"
testing {
    suites {
        test {
            targets {
                all {
                    testTask.configure {
                        doFirst {
                            jvmArgs = [
                                    '--module-path', classpath.asPath,
                                    '--patch-module', "$moduleName=" + files(project.sourceSets.test.java.classesDirectory).asPath +
                                            File.pathSeparator + files(project.sourceSets.test.output.resourcesDir).asPath +
                                            File.pathSeparator + files(project.sourceSets.main.output.resourcesDir).asPath,
                                    '--add-modules', 'ALL-MODULE-PATH',
                                    '--add-reads', "$moduleName=org.junit.jupiter.api",
                                    '--add-reads', "$moduleName=org.junit.jupiter.params",
                                    '--add-exports', "org.junit.platform.commons/org.junit.platform.commons.util=ALL-UNNAMED",
                                    '--add-exports', "org.junit.platform.commons/org.junit.platform.commons.logging=ALL-UNNAMED",
                                    '--add-opens', "$moduleName/org.sk.sample.env=ALL-UNNAMED",
                                    '--add-opens', "$moduleName/org.sk.sample.env=org.junit.platform.commons",
                                    '--add-reads', "$moduleName=sample.testutils",
                            ]
                            classpath = files()
                        }
                    }
                }
            }
        }
    }
}


compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'org.junit.jupiter.api',
                '--add-reads', "$moduleName=org.junit.jupiter.api",
                '--add-modules', 'org.junit.jupiter.params',
                '--add-reads', "$moduleName=org.junit.jupiter.params",
                '--add-modules', 'sample.testutils',
                '--add-reads', "$moduleName=sample.testutils",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}
