package org.sk.sample.plugin.applauncher;

import org.apache.tools.ant.taskdefs.condition.Os;
import org.gradle.api.GradleException;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.provider.Property;
import org.gradle.api.services.BuildService;
import org.gradle.api.services.BuildServiceParameters;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

public abstract class AppLauncher implements BuildService<AppLauncher.AppLauncherParams>, AutoCloseable {

    private Process process;


    interface AppLauncherParams extends BuildServiceParameters {
        Property<Integer> getPort();

        Property<String> getHost();

        DirectoryProperty getInstallationDirectory();

        DirectoryProperty getJavaHome();

        Property<String> getJavaOpts();
    }


    public AppLauncher() {
        System.out.println("in AppLauncher constructor " + this);
//        try {
//            startApp();
//        } catch (IOException e) {
//            throw new GradleException("could not start application "+e.getMessage(),e);
//        }
    }

    public void startApp() throws IOException {

        int port = getParameters().getPort().get();
        String host = getParameters().getHost().get();
        String installationDir = getParameters().getInstallationDirectory().get().getAsFile().getAbsolutePath();
        String javaHome = getParameters().getJavaHome().get().getAsFile().getAbsolutePath();
        String javaOpts = getParameters().getJavaOpts().get();

        System.out.println("in AppLauncher: installationDir: " + installationDir);
        System.out.println("in AppLauncher: javaHome: " + javaHome);
        System.out.println("in AppLauncher: javaOpts: " + javaOpts);
        System.out.println("in AppLauncher: port: " + port);
        System.out.println("in AppLauncher: host: " + host);

        System.out.println("starting app...");

        String scriptName = Os.isFamily(Os.FAMILY_WINDOWS) ? "application.bat" : "application";
        String startScript = getParameters().getInstallationDirectory().get().getAsFile().getAbsolutePath() + "/bin/" + scriptName;

        ProcessBuilder builder = new ProcessBuilder(startScript);
        builder.directory(getParameters().getInstallationDirectory().get().getAsFile());
        builder.environment().put("JAVA_HOME", javaHome);
        //send the host and port system properties to the application. the start script generated by
        //gradle Application plugin considers JAVA_OPTS.
        builder.environment().put("JAVA_OPTS", getParameters().getJavaOpts().get());
        File logsDir = new File(getParameters().getInstallationDirectory().get().getAsFile(), "logs");
        logsDir.mkdirs();
        File logFile = new File(logsDir, "app.log");
        builder.redirectOutput(logFile);
        builder.redirectError(logFile);
        builder.redirectErrorStream(true);

        this.process = builder.start();
        //wait a second to let the app start, 200 millis is probably enough too
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }

        for (String line : Files.readAllLines(logFile.toPath())) {
            System.out.println(line);
            if (line.contains("Server started")) {
                System.out.println("Integration test app is ready!");
                break;
            }
        }

        if (!process.isAlive()) {
            throw new GradleException("Could not start the application for integration tests, " +
                    " server terminated abnormally. exit value: " + process.exitValue());
        }
    }


    @Override
    public void close() {
        if (process != null) {
            System.out.println("in AppLauncher.close: stopping app...");
            process.destroy();
        }
    }
}
