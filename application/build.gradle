//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'sample.java-application-conventions-with-it'
    alias(pluginslibs.plugins.moduleplugin)
}



dependencies {
    implementation project(':messaging')
    implementation project(':utilities')
    implementation libs.commons.text
}

application {
    mainModule = 'sample.app'
    mainClass = 'org.sk.sample.app.Main'
}


/*
Testing:
This module shows how to do whitebox testing with module boundaries using org.javamodularity.moduleplugin.
the test AppMessengerTest loads a service provider and therefore needs to run in the module system.
moduleplugin does all the necessary patching.
module cmd-message-provider shows how to do that without the plugin.
module messenger has separate test suites for whitebox and blackbox testing which is my preferred solution.

This module also adds integration tests.
the integration tests start an embedded server and call some endpoints.
the integrationTest task is bound to the check lifecycle task.
 */



testing {
    suites {
        test {
            dependencies {
                implementation libs.commons.lang3
            }
            targets {
                all {
                    testTask.configure {
                        beforeTest { descriptor ->
                            logger.lifecycle("Running test: " + descriptor)
                        }
                        failFast = true
                        //because currently can't run more then one instance of the server
                        maxParallelForks = 1
                    }
                }
            }
        }

        integrationTest {
            dependencies {
                implementation libs.commons.lang3
                //the project's dependency for message-provider is implementation which does not
                // expose it to this test suite because this test suite is a module. blackbox testing.
                // so we need to add it explicitly.
                implementation project(':message-provider')
                runtimeOnly project(':cmd-message-provider')
                runtimeOnly project(':env-message-provider')
            }
            targets {
                all {
                    testTask.configure {
                        minHeapSize = "128m"
                        maxHeapSize = "512m"
                        beforeTest { descriptor ->
                            logger.lifecycle("Running test: " + descriptor)
                        }
                        failFast = true
                        //because currently can't run more then one instance of the server
                        maxParallelForks = 1
                        //TODO: because we always start the server on the same port we can't execute tests
                        // or test suites in parallel. so depend on the test task
                        dependsOn(test)
                    }
                }
            }
        }
    }
}
